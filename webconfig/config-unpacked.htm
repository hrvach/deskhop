

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /*!
  * Milligram v1.4.1
  * https://milligram.io
  *
  * Copyright (c) 2020 CJ Patoilo
  * Licensed under the MIT license
 */

*,
*:after,
*:before {
  box-sizing: inherit;
}

:root {
  --highlight-color: #000000;
  --font-color: #1a1919;
  --highlight-color2: #c02525;
}

html {
  box-sizing: border-box;
  font-size: 70%;
  /* background-color: rgb(32, 32, 32); */
}

body {
  color: var(--font-color);
  font-family: 'Roboto', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
  font-size: 1.6em;
  font-weight: 300;
  letter-spacing: .01em;
  line-height: 1.6;
}

blockquote {
  border-left: 0.3rem solid #384955;
  margin-left: 0;
  margin-right: 0;
  padding: 1rem 1.5rem;
}

blockquote *:last-child {
  margin-bottom: 0;
}

.button,
button,
input[type='button'],
input[type='reset'],
input[type='submit'] {
  background-color: var(--highlight-color);
  border: 0.1rem solid var(--highlight-color);
  border-radius: .4rem;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-size: 1.1rem;
  font-weight: 700;
  height: 3.8rem;
  letter-spacing: .1rem;
  line-height: 3.8rem;
  padding: 0.0rem 2.0rem;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;
}

.button:focus, .button:hover,
button:focus,
button:hover,
input[type='button']:focus,
input[type='button']:hover,
input[type='reset']:focus,
input[type='reset']:hover,
input[type='submit']:focus,
input[type='submit']:hover {
  background-color: var(--highlight-color2);
  border-color: var(--highlight-color2);
  color: #fff;
  outline: 0;
}

.button[disabled],
button[disabled],
input[type='button'][disabled],
input[type='reset'][disabled],
input[type='submit'][disabled] {
  cursor: default;
  opacity: .5;
}

.button[disabled]:focus, .button[disabled]:hover,
button[disabled]:focus,
button[disabled]:hover,
input[type='button'][disabled]:focus,
input[type='button'][disabled]:hover,
input[type='reset'][disabled]:focus,
input[type='reset'][disabled]:hover,
input[type='submit'][disabled]:focus,
input[type='submit'][disabled]:hover {
  background-color: var(--highlight-color);
  border-color: var(--highlight-color);
}

.button.button-outline,
button.button-outline,
input[type='button'].button-outline,
input[type='reset'].button-outline,
input[type='submit'].button-outline {
  background-color: transparent;
  color: var(--highlight-color);
}

.button.button-outline:focus, .button.button-outline:hover,
button.button-outline:focus,
button.button-outline:hover,
input[type='button'].button-outline:focus,
input[type='button'].button-outline:hover,
input[type='reset'].button-outline:focus,
input[type='reset'].button-outline:hover,
input[type='submit'].button-outline:focus,
input[type='submit'].button-outline:hover {
  background-color: transparent;
  border-color: var(--highlight-color2);
  color: var(--highlight-color2);
}

.button.button-outline[disabled]:focus, .button.button-outline[disabled]:hover,
button.button-outline[disabled]:focus,
button.button-outline[disabled]:hover,
input[type='button'].button-outline[disabled]:focus,
input[type='button'].button-outline[disabled]:hover,
input[type='reset'].button-outline[disabled]:focus,
input[type='reset'].button-outline[disabled]:hover,
input[type='submit'].button-outline[disabled]:focus,
input[type='submit'].button-outline[disabled]:hover {
  border-color: inherit;
  color: var(--highlight-color);
}

.button.button-clear,
button.button-clear,
input[type='button'].button-clear,
input[type='reset'].button-clear,
input[type='submit'].button-clear {
  background-color: transparent;
  border-color: transparent;
  color: var(--highlight-color);
}

.button.button-clear:focus, .button.button-clear:hover,
button.button-clear:focus,
button.button-clear:hover,
input[type='button'].button-clear:focus,
input[type='button'].button-clear:hover,
input[type='reset'].button-clear:focus,
input[type='reset'].button-clear:hover,
input[type='submit'].button-clear:focus,
input[type='submit'].button-clear:hover {
  background-color: transparent;
  border-color: transparent;
  color: var(--highlight-color2);
}

.button.button-clear[disabled]:focus, .button.button-clear[disabled]:hover,
button.button-clear[disabled]:focus,
button.button-clear[disabled]:hover,
input[type='button'].button-clear[disabled]:focus,
input[type='button'].button-clear[disabled]:hover,
input[type='reset'].button-clear[disabled]:focus,
input[type='reset'].button-clear[disabled]:hover,
input[type='submit'].button-clear[disabled]:focus,
input[type='submit'].button-clear[disabled]:hover {
  color: var(--highlight-color);
}

.button.button-shifted {
  /* margin-left: 10%; */
}

code {
  background: #f4f5f6;
  border-radius: .4rem;
  font-size: 86%;
  margin: 0 .2rem;
  padding: .2rem .5rem;
  white-space: nowrap;
}

pre {
  background: #f4f5f6;
  border-left: 0.3rem solid var(--highlight-color);
  overflow-y: hidden;
}

pre > code {
  border-radius: 0;
  display: block;
  padding: 1rem 1.5rem;
  white-space: pre;
}

hr {
  border: 0;
  border-top: 0.1rem dotted lightblue;
  margin: 1.0rem 3.0rem;
}

input[type='color'],
input[type='date'],
input[type='datetime'],
input[type='datetime-local'],
input[type='email'],
input[type='month'],
input[type='password'],
input[type='search'],
input[type='number'],
input[type='tel'],
input[type='text'],
input[type='url'],
input[type='week'],
input:not([type]),
textarea,
select {
  -webkit-appearance: none;
  background-color: transparent;
  border: 0.1rem solid #d1d1d1;
  border-radius: .4rem;
  box-shadow: none;
  box-sizing: inherit;
  height: 3.8rem;
  padding: .6rem 1.0rem .7rem;
  width: 100%;
}

input[type='color']:focus,
input[type='date']:focus,
input[type='datetime']:focus,
input[type='datetime-local']:focus,
input[type='email']:focus,
input[type='month']:focus,
input[type='number']:focus,
input[type='password']:focus,
input[type='search']:focus,
input[type='tel']:focus,
input[type='text']:focus,
input[type='url']:focus,
input[type='week']:focus,
input:not([type]):focus,
textarea:focus,
select:focus {
  border-color: var(--highlight-color);
  outline: 0;
}

select {
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 8" width="30"><path fill="%23d1d1d1" d="M0,0l6,8l6-8"/></svg>') center right no-repeat;
  padding-right: 3.0rem;
}

select:focus {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 8" width="30"><path fill="%239b4dca" d="M0,0l6,8l6-8"/></svg>');
}

select[multiple] {
  background: none;
  height: auto;
}

textarea {
  min-height: 6.5rem;
}

label,
legend {
  display: block;
  font-size: 1.6rem;
  font-weight: 700;
  margin-bottom: .5rem;
}

fieldset {
  border-width: 0;
  padding: 0;
}

input[type='checkbox'],
input[type='radio'] {
  display: inline;
}

.label-inline {
  display: inline-block;
  font-weight: 600;
  font-size: 80%;
  margin-left: .3rem;
}

.label-inline-bold {
  display: inline-block;
  font-size: 1.6rem;
  font-weight: 700;
}

.Title {
  font-weight: 600;
  font-size: 2rem;
  padding-left: 1%;
  background:linear-gradient(to right, firebrick 0%, mediumslateblue 100%); 
  -webkit-background-clip:text; 
  -webkit-text-fill-color:transparent;
}

input[type='range'].input-inline,
input[type='number'].input-inline {
  display: inline-block;
  font-weight: normal;
  border: none;
  width: 20%;
  font-weight: 600;
  font-size: 1.8rem;
  color: #ff3030;
}

input[type='range'] {
  -webkit-appearance: none;
  background: linear-gradient(to right, lightgreen 0%, firebrick 100%);
  height: 5px;
  border-radius: 20%;
}

.range {
  width: 100%;
}

.container {
  margin: 0 auto;
  max-width: 112.0rem;
  padding: 0 2.0rem;
  position: relative;
  width: 100%;
}

.row {
  display: flex;
  flex-direction: column;
  padding: 0;
  width: 100%;
}

.row.row-no-padding {
  padding: 0;
}

.row.row-no-padding > .column {
  padding: 0;
}

.row.row-wrap {
  flex-wrap: wrap;
}

.row.row-top {
  align-items: flex-start;
}

.row.row-bottom {
  align-items: flex-end;
}

.row.row-center {
  align-items: center;
}

.row.row-stretch {
  align-items: stretch;
}

.row.row-baseline {
  align-items: baseline;
}

.row .column {
  display: block;
  flex: 1 1 auto;
  margin-left: 0;
  max-width: 100%;
  width: 100%;
}

.row .column.column-offset-10 {
  margin-left: 10%;
}

.row .column.column-offset-20 {
  margin-left: 20%;
}

.row .column.column-offset-25 {
  margin-left: 25%;
}

.row .column.column-offset-33, .row .column.column-offset-34 {
  margin-left: 33.3333%;
}

.row .column.column-offset-40 {
  margin-left: 40%;
}

.row .column.column-offset-50 {
  margin-left: 50%;
}

.row .column.column-offset-60 {
  margin-left: 60%;
}

.row .column.column-offset-66, .row .column.column-offset-67 {
  margin-left: 66.6666%;
}

.row .column.column-offset-75 {
  margin-left: 75%;
}

.row .column.column-offset-80 {
  margin-left: 80%;
}

.row .column.column-offset-90 {
  margin-left: 90%;
}

.row .column.column-10 {
  flex: 0 0 10%;
  max-width: 10%;
}

.row .column.column-20 {
  flex: 0 0 20%;
  max-width: 20%;
}

.row .column.column-25 {
  flex: 0 0 25%;
  max-width: 25%;
}

.row .column.column-33, .row .column.column-34 {
  flex: 0 0 33.3333%;
  max-width: 33.3333%;
}

.row .column.column-40 {
  flex: 0 0 40%;
  max-width: 40%;
}

.row .column.column-50 {
  flex: 0 0 50%;
  max-width: 50%;
}

.row .column.column-60 {
  flex: 0 0 60%;
  max-width: 60%;
}

.row .column.column-66, .row .column.column-67 {
  flex: 0 0 66.6666%;
  max-width: 66.6666%;
}

.row .column.column-75 {
  flex: 0 0 75%;
  max-width: 75%;
}

.row .column.column-80 {
  flex: 0 0 80%;
  max-width: 80%;
}

.row .column.column-90 {
  flex: 0 0 90%;
  max-width: 90%;
}

.row .column .column-top {
  align-self: flex-start;
}

.row .column .column-bottom {
  align-self: flex-end;
}

.row .column .column-center {
  align-self: center;
}

@media (min-width: 40rem) {
  .row {
    flex-direction: row;

    width: calc(100% + 2.0rem);
  }
  .row .column {
    margin-bottom: inherit;
    padding: 0 1.0rem;
  }
}

a {
  color: var(--highlight-color);
  text-decoration: none;
}

a:focus, a:hover {
  color: var(--highlight-color2);
}

dl,
ol,
ul {
  list-style: none;
  margin-top: 0;
  padding-left: 0;
}

dl dl,
dl ol,
dl ul,
ol dl,
ol ol,
ol ul,
ul dl,
ul ol,
ul ul {
  font-size: 90%;
  margin: 1.5rem 0 1.5rem 3.0rem;
}

ol {
  list-style: decimal inside;
}

ul {
  list-style: circle inside;
}

.button,
button,
dd,
dt,
li {
  margin-bottom: 1.0rem;
}

fieldset,
input,
select,
textarea {
  margin-bottom: 1.5rem;
}

blockquote,
dl,
figure,
form,
ol,
p,
pre,
table,
ul {
  margin-bottom: 2.5rem;
}

table {
  border-spacing: 0;
  display: block;
  overflow-x: auto;
  text-align: left;
  width: 100%;
}

td,
th {
  border-bottom: 0.1rem solid #e1e1e1;
  padding: 1.2rem 1.5rem;
}

td:first-child,
th:first-child {
  padding-left: 0;
}

td:last-child,
th:last-child {
  padding-right: 0;
}

@media (min-width: 40rem) {
  table {
    display: table;
    overflow-x: initial;
  }
}

b,
strong {
  font-weight: bold;
}

p {
  margin-top: 0;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 300;
  letter-spacing: -.1rem;
  margin-bottom: 2.0rem;
  margin-top: 0;
}

h1 {
  font-size: 4.6rem;
  line-height: 1.2;
}

h2 {
  font-size: 3.6rem;
  line-height: 1.25;
}

h3 {
  font-size: 2.8rem;
  line-height: 1.3;
  font-weight: 600;
}

h4 {
  font-size: 2.2rem;
  color: white;
  letter-spacing: -.08rem;
  line-height: 1.35;
  font-weight: 600;
  background:linear-gradient(to right, firebrick 0%, mediumslateblue 100%); 
  padding: 4%;
  border-radius: 4px;
}

h5 {
  font-size: 1.8rem;
  letter-spacing: -.05rem;
  line-height: 1.5;
}

h6 {
  font-size: 1.6rem;
  letter-spacing: 0;
  line-height: 1.4;
}

img {
  max-width: 100%;
}

.clearfix:after {
  clear: both;
  content: ' ';
  display: table;
}

.float-left {
  float: left;
}

.float-right {
  float: right;
}

.online {
  opacity: 0.5;
}

.colors {
  font-weight: 600; 
  background:linear-gradient(to right, firebrick 0%, mediumslateblue 100%); 
  -webkit-background-clip:text; 
  -webkit-text-fill-color:transparent;
}

.center {
  display: block;
  margin: auto;
  text-align: center;
  align-items: center;
  margin-bottom: 4%;
}

.break {
  display: inline-block;
  width: 10px;
  background:linear-gradient(to right, firebrick 0%, mediumslateblue 100%); 
}
  </style>

  <title>LoopMotion Dashboard</title>
</head>

<body>

  <main class="wrapper">

    <section class="container">

      <div class="row" id="warning" style="display: none;">
        <blockquote>
          <h3> Oh, no! </h3>
          Unfortunately, your browser does not support WebHID or the Permissions Policy is blocking its usage. Please try Chromium <br />
          (or Chrome if you have to). Apologies for the inconvenience, hopefully a cross-browser solution happens soon.
        </blockquote>
      </div>

      <div class="row">
        <div class="column column-80" style="padding-top: 1%">
          <h3>
            loop<span style="color: #ff3030; font-weight: 400">motion</span
            >.io - <span class="colors">Dashboard</span>
          </h3>
        </div>
      </div>

      <div class="column" style="padding-right: 3em;">


      <div class="row">
        <div class="column column-20" style="margin-right: 2em; padding-top: 2em; background-color: #fa290421; border-radius: 10px;">
          <svg xmlns="http://www.w3.org/2000/svg" width="200" height="107" fill="none" xmlns:v="https://loopmotion.io">
            <g fill-rule="evenodd"><path d="M168.139 31.035c-8.969 9.3-80.156-1.83-105.799-.453-6.416.343-13.251.711-19.679 3.028-11.162 11.06-10.247 18.823-2.215 24.64 1.556.712-.626 10.965.952 11.588 9.426 1.087 23.994-.597 55.34 11.116 31.771 11.873 44.707 20.301 53.953 24.766 2.53-.125 5.045-.502 7.537-1.202a25.43 25.43 0 0 0 3.603-1.324l20.054-68.335s-4.887-1.195-13.747-3.824z" fill="url(#A)"/><path d="M77.475 47.397c11.483 1.204 13.475 1.874 20.706 3.607 6.367 1.526 12.877 3.464 19.15 5.267 4.547 1.309 18.29 5.315 19.056 7.118.341.813-2.243.077-3.3-.113-2.834-.512-5.636-1.177-8.441-1.825-9.554-2.208-18.98-4.638-28.656-6.33-.21-.037.43.008.644.012l.988.021c.825.017 4.478.417 3.066-1.056-1.307-1.366-14.341-4.935-18.579-5.847-1.468-.316-3.124-.76-4.635-.854z" fill="url(#B)"/><path d="M163.307 37.951c-2.617.51-5.107 1.262-7.782 1.509-12.304 1.135-24.587-.828-36.823-1.581-3.48-.214-7.114-.52-10.583-.034-.355.05-2.781.176-2.802.874-.027.907 1.223 1.587 1.88 1.942 2.119 1.142 4.518 1.904 6.812 2.588l28.862 8.214 15.303 4.334 5.122 1.432c.519.135 1.043.247 1.563.368.312.073.979.53.937.214-.095-.645-1.224-1.459-1.679-1.843-1.605-1.343-3.374-2.44-4.587-4.188-3.93-5.65 1.78-11.83 6.695-14.238" fill="url(#C)"/></g><path d="M185.715 63.535c-7.888-2.898-14.72-4.054-15.261-2.582s5.415 5.015 13.303 7.913 14.72 4.054 15.261 2.582-5.415-5.015-13.303-7.913z" fill="url(#D)"/><path d="M138.613 66.923c-12.075-3.69-22.466-4.709-23.209-2.276s8.443 7.395 20.518 11.085 22.466 4.708 23.209 2.276-8.443-7.395-20.518-11.085z" fill="url(#E)"/><g fill-rule="evenodd"><path d="M157.593 33.421c-11.346-3.088-45.263-6.96-68.021-8.116-7.561-.384-15.154-.41-22.754.068l-7.405.57c-1.132.108-1.059.081-2.129.215-.305.039-1.195.075-.905.138 3.631.788 7.982.204 11.742.13 4.704-.094 9.416.019 14.114.044 14.484.077 28.97 1.171 43.157 2.962 9.278 1.17 18.81 2.31 27.82 4.285a201.03 201.03 0 0 0 6.041 1.218c.214.04 1.775.445 1.881.359.248-.191.067-.893-3.541-1.874z" fill="url(#F)"/><path d="M134.558 85.426c-9.085-4.049-36.805-11.237-55.555-14.736-6.229-1.163-12.523-2-18.875-2.375-2.071-.123-4.131-.222-6.2-.27-.95-.022-.887-.039-1.788-.03-.257.003-.998-.059-.765.03 2.928 1.113 6.597 1.043 9.723 1.377 3.91.418 7.806 1.027 11.698 1.553 12.002 1.622 23.9 4.179 35.477 7.342 7.571 2.068 15.356 4.135 22.621 6.913 1.611.618 3.243 1.199 4.882 1.765.173.059 1.425.598 1.522.531.226-.148.149-.813-2.741-2.099z" fill="url(#G)"/><path d="M64.145 56.486c6.397 2.575 20.08 6.513 32.399 8.31 3.053.446 6.247.845 9.336.632.585-.04 2.658-.032 2.803-.975.184-1.184-1.469-2.082-2.297-2.536-2.534-1.39-5.408-2.112-8.139-2.99-10.424-3.348-21.337-5.2-32.055-7.313-1.94-.382-3.878-.779-5.837-1.066-.803-.118-1.805-.433-2.61-.144-1.529.55-1.19 3.03 6.4 6.083z" fill="url(#H)"/><path d="M157.613 104.124c-13.562-6.53-28.993-11.295-43.579-15.439-5.324-1.512-10.731-2.745-16.149-3.904-1.749-.374-3.5-.729-5.26-1.036l-1.282-.219c-.268-.045-1.039-.251-.805-.134 1.841.915 4.054 1.313 6.034 1.871l10.154 2.905c9.978 2.851 19.854 5.869 29.618 9.311l4.747 1.679 3.729 1.341c.995.34 1.976.721 2.959 1.086l2.332.868c2.448.931 4.809 2.039 7.26 2.948 1.546.573 1.529-.344.242-1.277z" fill="url(#I)"/><path d="M41.043 74.452c-.497-.305-.726-.807-1.173-.856s-.887.168-1.218.601l-5.281 6.889c-.43.561-1.034.75-1.595.495s-1.005-.909-1.169-1.741c-1.567-7.813-10.632-49.014-10.632-49.014s.071-2.006-.475-4.747c-.187-.918.001-1.899.48-2.524s1.163-.78 1.766-.406l32.603 20.282c.545.335.937 1.058 1.044 1.904s-.093 1.707-.524 2.268l-5.505 7.18c-.332.433-.526 1.042-.549 1.704s.141 1.308.444 1.807c1.961 3.229 20.541-.431 22.502 2.798.303.5-1.381 5.558-1.712 5.991-1.79 2.335-10.103 15.746-11.896 18.085-.328.428-.768.645-1.215.597s-.727-.479-1.176-.851c-3.257-2.726-10.422-7.855-14.717-10.459z" fill="url(#J)"/><path d="M50.706 62.414a2.06 2.06 0 0 0-1.517-.408 2.07 2.07 0 0 0-1.361.787l-5.281 6.888c-.43.561-1.12.862-1.823.793a2.05 2.05 0 0 1-1.643-1.123L20.078 31.332c-.354-.7-.825-6.394-.349-7.015.227-.296 1.318 4.044 1.905 3.603.654-.492 1.368-.897 1.772-.812 9.564 1.946 27.732 6.359 36.325 8.111.692.143 5.243-2.85 5.489-2.185s.398 6.557-.032 7.118l-5.505 7.18a2.06 2.06 0 0 0 .381 2.877l8.68 6.716c.432.331 2.963-2.694 3.035-2.155s.258 6.517-.073 6.95l-6.861 8.949a2.06 2.06 0 0 1-2.878.378l-11.26-8.633z" fill="#223743"/><path d="M50.398 56.802a2.06 2.06 0 0 0-1.517-.408 2.07 2.07 0 0 0-1.361.786l-5.281 6.889c-.43.561-1.12.862-1.823.792a2.05 2.05 0 0 1-1.643-1.123L19.77 25.721c-.354-.7-.273-1.542.207-2.168a2.06 2.06 0 0 1 2.04-.762l41.644 8.488a2.05 2.05 0 0 1 1.514 1.29 2.06 2.06 0 0 1-.295 1.971l-5.505 7.18a2.06 2.06 0 0 0 .381 2.877l11.26 8.633a2.06 2.06 0 0 1 .382 2.877l-6.861 8.949a2.06 2.06 0 0 1-2.878.378l-11.26-8.633z" fill="#ff7367" stroke="#000" stroke-width=".856" stroke-miterlimit="1.5" stroke-linejoin="round"/></g>
              <defs>
                  <linearGradient id="A" x1="136.151" y1="79.707" x2="-15.95" y2="18.147" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="B" x1="96.038" y1="44.97" x2="97.099" y2="73.795" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#ff3030"/></linearGradient><linearGradient id="C" x1="142.532" y1="35.47" x2="133.992" y2="98.398" href="#K"><stop stop-opacity="0"/><stop offset="1" stop-color="#f84f4f"/></linearGradient><linearGradient id="D" x1="177.955" y1="48.84" x2="185.539" y2="101.115" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#ff4141"/></linearGradient><linearGradient id="E" x1="155.624" y1="77.488" x2="106.566" y2="60.876" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#fe3b3b"/></linearGradient><linearGradient id="F" x1="104.196" y1="11.991" x2="108.314" y2="55.963" href="#K"><stop stop-opacity="0"/><stop offset="1" stop-color="#f24444"/></linearGradient><linearGradient id="G" x1="104.987" y1="61.681" x2="111.697" y2="134.518" href="#K"><stop stop-color="#fd3939" stop-opacity="0"/><stop offset="1"/></linearGradient><linearGradient id="H" x1="106.376" y1="63.731" x2="51.516" y2="47.564" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#ff1f1f"/></linearGradient><linearGradient id="I" x1="93.202" y1="86.645" x2="164.088" y2="114.448" href="#K"><stop stop-color="#fff" stop-opacity="0"/><stop offset="1" stop-color="#ff0202"/></linearGradient><linearGradient id="J" x1="38.976" y1="78.443" x2="45.797" y2="22.046" href="#K"><stop stop-opacity="0"/><stop offset="1"/></linearGradient><linearGradient id="K" gradientUnits="userSpaceOnUse"/></defs>
          </svg>

            <div id="menu-buttons">
              <button data-handler="connectHandler" class="button button-clear button-shifted">Connect</button><br />
              <button data-handler="readHandler" class="button button-clear button-shifted online">Read</button><br />
              <button data-handler="saveHandler" class="button button-clear button-shifted online">Save</button><br />
              <button data-handler="rebootHandler" class="button button-clear button-shifted online">Exit</button><br />
              <hr />
              <button data-handler="blinkHandler" class="button button-clear button-shifted online">Blink</button><br />
              <button data-handler="blinkBothHandler" class="button button-clear button-shifted online">Blink both</button><br />
              <button data-handler="enterBootloaderHandler" class="button button-clear button-shifted online">Bootloader</button><br />
              <button data-handler="wipeConfigHandler" class="button button-clear button-shifted online">Wipe Config</button><br />
            </div>
        </div>

        <div class="column" style="padding-top: 2em;">
          <svg style="display:none" fill="none">
            <defs>
              <symbol id="monitor" viewBox="0 0 128 128">
            <path
              d="M111 18C114.3 18 117 20.7 117 24V90C117 93.3 114.3 96 111 96H18C14.7 96 12 93.3 12 90V24C12 20.7 14.7 18 18 18H111ZM111 14H18C12.5 14 8 18.5 8 24V90C8 95.5 12.5 100 18 100H111C116.5 100 121 95.5 121 90V24C121 18.5 116.5 14 111 14Z"
              fill="#253239"
            />
            <path
              d="M65 91C66.6569 91 68 89.6569 68 88C68 86.3431 66.6569 85 65 85C63.3431 85 62 86.3431 62 88C62 89.6569 63.3431 91 65 91Z"
              fill="#FF3030"
            />
            <path
              d="M83.5 113H67V104.5C67 103.4 66.1 102.5 65 102.5C63.9 102.5 63 103.4 63 104.5V113H46.5C45.4 113 44.5 113.9 44.5 115C44.5 116.1 45.4 117 46.5 117H83.5C84.6 117 85.5 116.1 85.5 115C85.5 113.9 84.6 113 83.5 113Z"
              fill="#FF3030"
            />
            <path
              d="M108 27V78H21V27H108ZM110 25H19V80H110V25Z"
              fill="#3B97D3"
            />
          </symbol>
        </defs>
          </svg>

          <svg class="center">
            <use href="#monitor" />
          </svg>


            <h3 class="center">Left Side</h3>

            
              








  
    
<label class=" None"> Screen Count</label>

    <select class="api" data-type="uint32" data-key="11" required>
    <option disabled selected value></option>

    
    <option value="1">1</option>
    
    <option value="2">2</option>
    
    <option value="3">3</option>
    
    </select><br />

  

            
              








  
    
<label class=" None"> Screen Position</label>

    <select class="api" data-type="uint8" data-key="17" required>
    <option disabled selected value></option>

    
    <option value="1">Left</option>
    
    <option value="2">Right</option>
    
    </select><br />

  

            
              








  
    
<label class=" None"> Operating System</label>

    <select class="api" data-type="uint8" data-key="16" required>
    <option disabled selected value></option>

    
    <option value="1">Linux</option>
    
    <option value="2">MacOS</option>
    
    <option value="3">Windows</option>
    
    <option value="4">Android</option>
    
    <option value="255">Other</option>
    
    </select><br />

  

            
              








  
    
<label class=" Title"> Screensaver</label>


  

            
              








  
    
<label class=" None"> Type</label>

    <select class="api" data-type="uint8" data-key="19" required>
    <option disabled selected value></option>

    
    <option value="0">Disabled</option>
    
    <option value="1">Pong</option>
    
    <option value="2">Jitter</option>
    
    </select><br />

  

            
              








  
      
<label class=" None"> Idle Time (μs)</label>

      
<input class="api None" type="text" name="name21" data-type="uint64" data-key="21"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
      
<label class=" None"> Max Time (μs)</label>

      
<input class="api None" type="text" name="name22" data-type="uint64" data-key="22"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
    
<label class=" Title"> Mouse Acceleration</label>


  

            
              








  
  <div class="clearfix">
    <form>
      
<label class="label-inline None"> Speed X=</label>


      
<input class="input-inline None" type="number" name="aInput12" data-type="int32" data-key="12"
  onchange="valueChangedHandler(this)"

        readonly oninput="this.form.aRange12.value=this.value" />

      
<input class="range api None" type="range" name="aRange12" data-type="int32" data-key="12"
  onchange="valueChangedHandler(this)"

        min="" max="" oninput="this.form.aInput12.value=this.value" />
    </form>

  </div>

  

            
              








  
  <div class="clearfix">
    <form>
      
<label class="label-inline None"> Speed Y=</label>


      
<input class="input-inline None" type="number" name="aInput13" data-type="int32" data-key="13"
  onchange="valueChangedHandler(this)"

        readonly oninput="this.form.aRange13.value=this.value" />

      
<input class="range api None" type="range" name="aRange13" data-type="int32" data-key="13"
  onchange="valueChangedHandler(this)"

        min="" max="" oninput="this.form.aInput13.value=this.value" />
    </form>

  </div>

  

            
              








  
    
<label class=" Title"> Precision Screen Alignment</label>


  

            
              








  
      
<label class=" None"> Border Top</label>

      
<input class="api None" type="text" name="name14" data-type="int32" data-key="14"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
      
<label class=" None"> Border Bottom</label>

      
<input class="api None" type="text" name="name15" data-type="int32" data-key="15"
  onchange="valueChangedHandler(this)"
  />

  

            

        </div>
        
        <div class="column" style="padding-top: 2em;">
          <svg class="center">
          <use href="#monitor" />
          </svg>

            <h3 class="center">Right Side</h3>

            
              








  
    
<label class=" None"> Screen Count</label>

    <select class="api" data-type="uint32" data-key="41" required>
    <option disabled selected value></option>

    
    <option value="1">1</option>
    
    <option value="2">2</option>
    
    <option value="3">3</option>
    
    </select><br />

  

            
              








  
    
<label class=" None"> Screen Position</label>

    <select class="api" data-type="uint8" data-key="47" required>
    <option disabled selected value></option>

    
    <option value="1">Left</option>
    
    <option value="2">Right</option>
    
    </select><br />

  

            
              








  
    
<label class=" None"> Operating System</label>

    <select class="api" data-type="uint8" data-key="46" required>
    <option disabled selected value></option>

    
    <option value="1">Linux</option>
    
    <option value="2">MacOS</option>
    
    <option value="3">Windows</option>
    
    <option value="4">Android</option>
    
    <option value="255">Other</option>
    
    </select><br />

  

            
              








  
    
<label class=" Title"> Screensaver</label>


  

            
              








  
    
<label class=" None"> Type</label>

    <select class="api" data-type="uint8" data-key="49" required>
    <option disabled selected value></option>

    
    <option value="0">Disabled</option>
    
    <option value="1">Pong</option>
    
    <option value="2">Jitter</option>
    
    </select><br />

  

            
              








  
      
<label class=" None"> Idle Time (μs)</label>

      
<input class="api None" type="text" name="name51" data-type="uint64" data-key="51"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
      
<label class=" None"> Max Time (μs)</label>

      
<input class="api None" type="text" name="name52" data-type="uint64" data-key="52"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
    
<label class=" Title"> Mouse Acceleration</label>


  

            
              








  
  <div class="clearfix">
    <form>
      
<label class="label-inline None"> Speed X=</label>


      
<input class="input-inline None" type="number" name="aInput42" data-type="int32" data-key="42"
  onchange="valueChangedHandler(this)"

        readonly oninput="this.form.aRange42.value=this.value" />

      
<input class="range api None" type="range" name="aRange42" data-type="int32" data-key="42"
  onchange="valueChangedHandler(this)"

        min="" max="" oninput="this.form.aInput42.value=this.value" />
    </form>

  </div>

  

            
              








  
  <div class="clearfix">
    <form>
      
<label class="label-inline None"> Speed Y=</label>


      
<input class="input-inline None" type="number" name="aInput43" data-type="int32" data-key="43"
  onchange="valueChangedHandler(this)"

        readonly oninput="this.form.aRange43.value=this.value" />

      
<input class="range api None" type="range" name="aRange43" data-type="int32" data-key="43"
  onchange="valueChangedHandler(this)"

        min="" max="" oninput="this.form.aInput43.value=this.value" />
    </form>

  </div>

  

            
              








  
    
<label class=" Title"> Precision Screen Alignment</label>


  

            
              








  
      
<label class=" None"> Border Top</label>

      
<input class="api None" type="text" name="name44" data-type="int32" data-key="44"
  onchange="valueChangedHandler(this)"
  />

  

            
              








  
      
<label class=" None"> Border Bottom</label>

      
<input class="api None" type="text" name="name45" data-type="int32" data-key="45"
  onchange="valueChangedHandler(this)"
  />

  

            

        </div>

      </div>

      <div class="row">
        <div class="column column-20" style="margin-right: 2em; margin-top: 4%;">
        </div>
        <!-- <div class="column" style="background-color: #d7e5f0;"> -->
        
        <div class="break"></div>
        <div class="column">
          <h4>Mouse & Keyboard Configuration</h4>

            
              








  
    
<label class=" None"> Mouse</label>


  

            
              








  
  <div class="clearfix">
    
<label class="label-inline None"> Force Mouse Boot Mode</label>

    
<input class="api None" type="checkbox" name="name71" data-type="uint8" data-key="71"
  onchange="valueChangedHandler(this)"
  />

  </div>

  

            
              








  
  <div class="clearfix">
    
<label class="label-inline None"> Enable Acceleration</label>

    
<input class="api None" type="checkbox" name="name75" data-type="uint8" data-key="75"
  onchange="valueChangedHandler(this)"
  />

  </div>

  

            
              








  
  <div class="clearfix">
    <form>
      
<label class="label-inline None"> Mouse transition force (Best set to 3) =</label>


      
<input class="input-inline None" type="number" name="aInput77" data-type="uint16" data-key="77"
  onchange="valueChangedHandler(this)"

        readonly oninput="this.form.aRange77.value=this.value" />

      
<input class="range api None" type="range" name="aRange77" data-type="uint16" data-key="77"
  onchange="valueChangedHandler(this)"

        min="" max="" oninput="this.form.aInput77.value=this.value" />
    </form>

  </div>

  

            
              








  
    
<label class=" None"> Keyboard</label>


  

            
              








  
  <div class="clearfix">
    
<label class="label-inline None"> Force KBD Boot Protocol</label>

    
<input class="api None" type="checkbox" name="name72" data-type="uint8" data-key="72"
  onchange="valueChangedHandler(this)"
  />

  </div>

  

            
              








  
  <div class="clearfix">
    
<label class="label-inline None"> KBD LED as Indicator</label>

    
<input class="api None" type="checkbox" name="name73" data-type="uint8" data-key="73"
  onchange="valueChangedHandler(this)"
  />

  </div>

  

            
              








  
  <div class="clearfix">
    
<label class="label-inline None"> Enforce Ports</label>

    
<input class="api None" type="checkbox" name="name76" data-type="uint8" data-key="76"
  onchange="valueChangedHandler(this)"
  />

  </div>

  

            

          
        </div>

        <div class="column">
          <h4>Firmware Information</h4>

          
            








  
    
<label class="label-inline None"> Running FW version:</label>

    
<input class="content api None" type="text" name="name78" data-type="uint16" data-key="78"
  onchange="valueChangedHandler(this)"
 data-hex readonly />

  

          
            








  
    
<label class="label-inline None"> Running FW checksum:</label>

    
<input class="content api None" type="text" name="name79" data-type="uint32" data-key="79"
  onchange="valueChangedHandler(this)"
 data-hex readonly />

  

          

        </div>
        
      </div>
      <div class="row">
        <div class="column column-20" style="margin-right: 2em;">
        </div>
        <div class="column" style="margin-top: 2em;">
          <input type="submit" value="Save" id="submitButton">
        </div>
      </div>

      </div>
    </div>
    </section>
  </main>

  <script>
  const mgmtReportId = 6;
var device;

const packetType = {
  keyboardReportMsg: 1, mouseReportMsg: 2, outputSelectMsg: 3, firmwareUpgradeMsg: 4, switchLockMsg: 7,
  syncBordersMsg: 8, flashLedMsg: 9, wipeConfigMsg: 10, readConfigMsg: 16, writeConfigMsg: 17, saveConfigMsg: 18,
  rebootMsg: 19, getValMsg: 20, setValMsg: 21, getValAllMsg: 22, proxyPacketMsg: 23
};

function calcChecksum(report) {
  let checksum = 0;
  for (let i = 3; i < 11; i++)
    checksum ^= report[i];

  return checksum;
}

async function sendReport(type, payload = [], sendBoth = false) {
  if (!device || !device.opened)
    return;

  /* First send this one, if the first one gets e.g. rebooted */
  if (sendBoth) {
    var reportProxy = makeReport(type, payload, true);
    await device.sendReport(mgmtReportId, reportProxy);
    }

    var report = makeReport(type, payload, false);
    await device.sendReport(mgmtReportId, report);
}

function makeReport(type, payload, proxy=false) {
  var dataOffset = proxy ? 4 : 3;
  report = new Uint8Array([0xaa, 0x55, type, ...new Array(9).fill(0)]);

  if (proxy)
    report = new Uint8Array([0xaa, 0x55, packetType.proxyPacketMsg, type, ...new Array(7).fill(0), type]);

  if (payload) {
    report.set([...payload], dataOffset);
    report[report.length - 1] = calcChecksum(report);
  }
  return report;
}

function packValue(element, key, dataType, buffer) {
  const dataOffset = 1;
  var buffer = new ArrayBuffer(8);
  var view = new DataView(buffer);

  const methods = {
    "uint32": view.setUint32,
    "uint64": view.setUint32, /* Yes, I know. :-| */
    "int32": view.setInt32,
    "uint16": view.setUint16,
    "uint8": view.setUint8,
    "int16": view.setInt16,
    "int8": view.setInt8
  };

  if (dataType in methods) {
    const method = methods[dataType];
    if (element.type === 'checkbox')
      view.setUint8(dataOffset, element.checked ? 1 : 0, true);
    else
      method.call(view, dataOffset, element.value, true);
  }

  view.setUint8(0, key);
  return new Uint8Array(buffer);
}

window.addEventListener('load', function () {
  if (!("hid" in navigator)) {
    document.getElementById('warning').style.display = 'block';
  }

  this.document.getElementById('menu-buttons').addEventListener('click', function (event) {
    window[event.target.dataset.handler]();
  })
});

document.getElementById('submitButton').addEventListener('click', async () => { await saveHandler(); });

async function connectHandler() {
  if (device && device.opened)
    return;

  var devices = await navigator.hid.requestDevice({
    filters: [{ vendorId: 0x1209, productId: 0xc000, usagePage: 0xff00, usage: 0x10 }]
  });

  device = devices[0];
  device.open().then(async () => {
    device.addEventListener('inputreport', handleInputReport);
    document.querySelectorAll('.online').forEach(element => { element.style.opacity = 1.0; });
    await readHandler();
  });
}

async function blinkHandler() {
  await sendReport(packetType.flashLedMsg, []);
}

async function blinkBothHandler() {
  await sendReport(packetType.flashLedMsg, [], true);
}

function getValue(element) {
  if (element.type === 'checkbox')
    return element.checked ? 1 : 0;
  else
    return element.value;
}

function setValue(element, value) {
  element.setAttribute('fetched-value', value);

  if (element.type === 'checkbox')
    element.checked = value;
  else
    element.value = value;
    element.dispatchEvent(new Event('input', { bubbles: true }));
}


function updateElement(key, event) {
  var dataOffset = 4;
  var element = document.querySelector(`[data-key="${key}"]`);

  if (!element)
    return;

  const methods = {
    "uint32": event.data.getUint32,
    "uint64": event.data.getUint32, /* Yes, I know. :-| */
    "int32": event.data.getInt32,
    "uint16": event.data.getUint16,
    "uint8": event.data.getUint8,
    "int16": event.data.getInt16,
    "int8": event.data.getInt8
  };

  dataType = element.getAttribute('data-type');

  if (dataType in methods) {
    var value = methods[dataType].call(event.data, dataOffset, true);
    setValue(element, value);

    if (element.hasAttribute('data-hex'))
      setValue(element, parseInt(value).toString(16));
  }
}

async function readHandler() {
  if (!device || !device.opened)
    await connectHandler();

  await sendReport(packetType.getValAllMsg);
}

async function handleInputReport(event) {
  var data = new Uint8Array(event.data.buffer);
  var key = data[3];

  updateElement(key, event);
}

async function rebootHandler() {
  await sendReport(packetType.rebootMsg);
}

async function enterBootloaderHandler() {
  await sendReport(packetType.firmwareUpgradeMsg, true, true);
}

async function valueChangedHandler(element) {
  var key = element.getAttribute('data-key');
  var dataType = element.getAttribute('data-type');

  var origValue = element.getAttribute('fetched-value');
  var newValue = getValue(element);

  if (origValue != newValue) {
    uintBuffer = packValue(element, key, dataType);

    /* Send to both devices */
    await sendReport(packetType.setValMsg, uintBuffer, true);

    /* Set this as the current value */
    element.setAttribute('fetched-value', newValue);
  }
}

async function saveHandler() {
  const elements = document.querySelectorAll('.api');

  if (!device || !device.opened)
    return;

  for (const element of elements) {
    var origValue = element.getAttribute('fetched-value')

    if (element.hasAttribute('readonly'))
      continue;

    if (origValue != getValue(element))
      await valueChangedHandler(element);
  }
  await sendReport(packetType.saveConfigMsg, [], true);
}

async function wipeConfigHandler() {
  await sendReport(packetType.wipeConfigMsg, [], true);
}
  </script>
</body>

</html>